<!-- Question - 1 You are given an array ‘Arr’ of size ‘N’ consisting of positive integers.
Make a linked list from the array and return the head of the linked list.
The head of the linked list is the first element of the array, and the tail of the linked list is the last element.-->
Code-
public static Node constructLL(int []arr) {
        // Write your code here
        if(arr.length == 0)return null;
        Node head = new Node(arr[0]);
        Node temp = head;
        for(int i=1;i<arr.length;i++){
            Node newNode = new Node(arr[i]);
            temp.next = newNode;
            temp = newNode;
        }
        return head;
    }

<!-- Question -2  Given a linked list and an integer value val, insert a new node with that value at the beginning (before the head) of the list and return the updated linked list.-->
Code-
public static void addFirst(int data){
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
            
        }
        else{
        newNode.next = head;
        head = newNode;
        }
        size++;
    }

<!-- Question - 3  Given a linked list, delete the tail of the linked list and print the updated linked list. -->
Code - 
public static int removeLast(){
        if (head == null ) {
            return -1;
        }
        if (head.next == null) {
            return head.data;
        }

       Node temp = head;
       while (temp.next.next != null ) {
        temp = temp.next;
       }
       int ans = temp.next.data;
       temp.next = null;
       return ans;

    }

<!-- Question - 4 Given the head of a linked list, print the length of the linked list.-->
Code-
public static int length(Node head){
        //Your code goes here
        int size = 0;
        Node temp = head;
        while(temp != null){
            temp = temp.next;
            size++;
        }
        return size;
    }

<!-- Question - 5 Given the head of a linked list and an integer value, find out whether the integer is present in the linked list or not. Return true if it is present, or else return false.-->
 public static int searchInLinkedList(Node head, int k)
    {
        // Write Your Code Here.
        Node temp = head;
        while(temp != null){
            if(temp.data == k){
                return 1;
            }
            temp = temp.next;
        }
        return 0;
    }
